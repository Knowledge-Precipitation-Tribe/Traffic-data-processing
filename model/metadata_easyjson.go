// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBa0ee0e3DecodeTrafficDataProcessingModel(in *jlexer.Lexer, out *MetaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country_id":
			out.CountryID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "state_pm":
			out.StatePm = string(in.String())
		case "abs_pm":
			out.AbsPm = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "latitude":
			out.Latitude = string(in.String())
		case "longitude":
			out.Longitude = string(in.String())
		case "length":
			out.Length = string(in.String())
		case "number":
			out.Number = int(in.Int())
		case "lanes":
			out.Lanes = int(in.Int())
		case "city":
			out.City = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa0ee0e3EncodeTrafficDataProcessingModel(out *jwriter.Writer, in MetaData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"country_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CountryID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"state_pm\":"
		out.RawString(prefix)
		out.String(string(in.StatePm))
	}
	{
		const prefix string = ",\"abs_pm\":"
		out.RawString(prefix)
		out.String(string(in.AbsPm))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.String(string(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.String(string(in.Longitude))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.String(string(in.Length))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"lanes\":"
		out.RawString(prefix)
		out.Int(int(in.Lanes))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa0ee0e3EncodeTrafficDataProcessingModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa0ee0e3EncodeTrafficDataProcessingModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa0ee0e3DecodeTrafficDataProcessingModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa0ee0e3DecodeTrafficDataProcessingModel(l, v)
}
